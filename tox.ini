# Run a specific environemnt:
#   tox -e docker-fedora-31
# Run all in parallel:
#   tox -p auto
# with local squid:
#   EXTRA_DOCKER_BUILD_ARGS="--build-arg http_proxy=http://host.docker.internal:3128 --build-arg https_proxy=http://host.docker.internal:3128" tox -p auto
[tox]
### Test that the system packages listed in debian.txt/fedora.txt files of standard spkg exist
### and satisfy the requirements tested by spkg-configure.m4, then compile a few packages.
###
envlist =
   {### "docker" toxenvs copy sources from the source tree subject to the exclusions in
    ### the file ".dockerignore".  This should work out of non-clean source trees, and all
    ### "docker" toxenvs can be run in parallel.
    docker-{ubuntu-{trusty,xenial,bionic,latest,eoan,rolling,focal,devel},
            debian-{jessie,stretch,buster,bullseye,sid},
            fedora-{26,27,28,29,30,31,32},
            centos-{7,8},
            arch-latest,
            conda-forge,conda-anaconda3
            },
    ### "local" targets should be run from a source tree that is freshly checked out
    ### (for example, by 'git worktree add ...') or has been cleaned by 'make bdist-clean' --
    ### because they build within the source tree (because we have no VPATH support).
    ### Only one "local" target can be run at a time.
    ### However, "local" targets install in a separate prefix (SAGE_LOCAL=.tox/TOXENV/local)
    ### rather than "local/" and also place log files into .tox/TOXENV/log, where TOXENV
    ### is the name of the environment.
    local-homebrew-macos
   }-{minimal,standard,maximal}

skipsdist = true

[testenv]
passenv =
    EXTRA_DOCKER_BUILD_ARGS
setenv =
    # Set this to 'force' instead of 'yes' to make it an error if an spkg with spkg-configure and system package
    # is not recognized.
    WITH_SYSTEM_SPKG=yes
    # Set this to 'yes' instead of 'no' to ignore missing system packages - by installing them one by one
    # and ignoring errors.  We use that to take care of old versions of distributions.
    IGNORE_MISSING_SYSTEM_PACKAGES=no
    # What system packages should be installed. Default: All standard packages with spkg-configure.
    # These are bash extglob patterns.
    TYPE_PATTERN=standard
    minimal: TYPE_PATTERN=minimal
    maximal: TYPE_PATTERN=@(standard|optional)
    # FIXME: Can't seem to use any system m4ri/m4rie/givaro apparently on any Debian/Ubuntu
    ubuntu: EXTRA_CONFIGURE_ARGS=--with-system-m4ri=no --with-system-m4rie=no --with-system-givaro=no
    debian: EXTRA_CONFIGURE_ARGS=--with-system-m4ri=no --with-system-m4rie=no --with-system-givaro=no
    fedora: EXTRA_CONFIGURE_ARGS=--with-system-m4ri=no --with-system-m4rie=no
    #
    # https://hub.docker.com/_/ubuntu?tab=description
    # as of 2020-01, latest=bionic=18.04, eoan=rolling=19.10, focal=devel=20.04
    #
    ubuntu:         SYSTEM=debian
    ubuntu-trusty:  BASE_IMAGE=ubuntu:trusty
    ubuntu-trusty:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-xenial:  BASE_IMAGE=ubuntu:xenial
    ubuntu-xenial:                             IGNORE_MISSING_SYSTEM_PACKAGES=yes
    ubuntu-bionic:  BASE_IMAGE=ubuntu:bionic
    ubuntu-latest:  BASE_IMAGE=ubuntu:latest
    ubuntu-eoan:    BASE_IMAGE=ubuntu:eoan
    ubuntu-rolling: BASE_IMAGE=ubuntu:rolling
    ubuntu-focal:   BASE_IMAGE=ubuntu:focal
    ubuntu-devel:   BASE_IMAGE=ubuntu:devel
    #
    # https://hub.docker.com/_/debian
    #
    debian:          SYSTEM=debian
    debian-jessie:   BASE_IMAGE=debian:jessie
    debian-jessie:                               IGNORE_MISSING_SYSTEM_PACKAGES=yes
    debian-stretch:  BASE_IMAGE=debian:stretch
    debian-buster:   BASE_IMAGE=debian:buster
    debian-bullseye: BASE_IMAGE=debian:bullseye
    debian-sid:      BASE_IMAGE=debian:sid
    #
    # https://hub.docker.com/_/fedora
    #
    fedora:          SYSTEM=fedora
    fedora-26:       BASE_IMAGE=fedora:26
    fedora-26:                                   IGNORE_MISSING_SYSTEM_PACKAGES=yes
    fedora-27:       BASE_IMAGE=fedora:27
    fedora-28:       BASE_IMAGE=fedora:28
    fedora-29:       BASE_IMAGE=fedora:29
    fedora-30:       BASE_IMAGE=fedora:30
    fedora-31:       BASE_IMAGE=fedora:31   # latest
    fedora-32:       BASE_IMAGE=fedora:32   # rawhide
    #
    # https://hub.docker.com/_/centos
    #
    centos:          SYSTEM=fedora
    centos:                                      IGNORE_MISSING_SYSTEM_PACKAGES=yes
    #centos-6:        BASE_IMAGE=centos:centos6    # only has autoconf 2.63 -- too old for bootstrap
    centos-7:        BASE_IMAGE=centos:centos7
    centos-8:        BASE_IMAGE=centos:centos8
    #
    # https://hub.docker.com/_/archlinux/
    #
    archlinux:        SYSTEM=arch
    archlinux-latest: BASE_IMAGE=archlinux:latest
    #
    # https://hub.docker.com/r/continuumio
    #
    conda:            SYSTEM=conda
    conda-forge:      BASE_IMAGE=continuumio/miniconda3:latest
    conda-forge:                                                CONDARC=condarc.yml
    conda-anaconda3:  BASE_IMAGE=continuumio/anaconda3:latest
    conda-anaconda3:                                            CONDARC=/dev/null
    conda-anaconda3:                                                                  IGNORE_MISSING_SYSTEM_PACKAGES=yes

    ###
    ### "local" envs
    ###
    homebrew:         SYSTEM=homebrew
    local:            HOME={envdir}
    # brew caches downloaded files in ${HOME}/Library/Caches. We share it between different toxenvs.
    local-homebrew:   HOMEBREW={envdir}/homebrew
    local-homebrew:   PATH={env:HOMEBREW}/opt/gettext/bin:{env:HOMEBREW}/bin:/usr/bin:/bin:/usr/sbin:/sbin
    local-homebrew-standard:   PKG_CONFIG_PATH="{env:HOMEBREW}/opt/openblas/lib/pkgconfig"

# environment will be skipped if regular expression does not match against the sys.platform string
platform =
    local-macos:   darwin

whitelist_externals =
                   bash
    docker:        docker
    homebrew:      brew

commands_pre =
    # https://docs.brew.sh/Installation
    homebrew:      bash -c 'if [ ! -d {env:HOME}/Library/Caches ]; then mkdir -p {toxworkdir}/Caches && mkdir -p {env:HOME}/Library && ln -sf {toxworkdir}/Caches {env:HOME}/Library/; fi'
    homebrew:      bash -c 'if [ ! -x {env:HOMEBREW}/bin/brew ]; then mkdir -p {envdir}/homebrew && cd {envdir}/homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 ; fi'
    # homebrew-mininmal: Minimal for bootstrapping and build:
    homebrew:      {env:HOMEBREW}/bin/brew install gettext autoconf automake libtool
    # homebrew-standard: including openblas also triggers installation of gcc 9.2.0
    homebrew-standard:   {env:HOMEBREW}/bin/brew install openblas gsl readline
    # Install symbolic links "config.log" and "logs" in SAGE_ROOT so that log files are written into the tox log directory.
    # Install a symbolic link "prefix" in SAGE_ROOT for convenient inspection; it is not used in the build.
    local:         bash -c 'touch {envdir}/log/config.log; ln -s {envdir}/log/config.log .; if [ ! -d logs -o -L logs ]; then ln -sf {envdir}/log logs; fi; ln -sf {envdir}/local prefix'

commands =
    docker:        bash -c 'build/bin/write-dockerfile.sh {env:SYSTEM} "{env:TYPE_PATTERN:}" {env:WITH_SYSTEM_SPKG} {env:IGNORE_MISSING_SYSTEM_PACKAGES} > {envdir}/Dockerfile'
    docker:        docker build . -f {envdir}/Dockerfile                          \
    docker:        --build-arg EXTRA_CONFIGURE_ARGS="{env:EXTRA_CONFIGURE_ARGS:}" \
    docker:        --build-arg BASE_IMAGE={env:BASE_IMAGE}                        \
    docker-conda:  --build-arg USE_CONDARC="{env:CONDARC}"                        \
    docker:        {env:EXTRA_DOCKER_BUILD_ARGS:}
    local:         bash -c './bootstrap && ./configure --prefix={envdir}/local && MAKE="make -j12" make V=0 fflas_ffpack'
